

@model BitBooking.DAL.Models.AccomodationInfo

@{
    ViewBag.Title = "UpdateInfo";
}

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>
<div class="col-lg-12">
<div class="col-sm-5">
    <h2>UpdateInfo</h2>
    <input type="text" class="gugl hidden" value="@Model.City" />

   
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
    <input type="text" class="gugls hidden " id="zk" name="GoogleX" value="@Model.GoogleX" />
    <input type="text" class="guglids hidden " id="kz" name="GoogleY" value="@Model.GoogleY" />
        <div class="form-horizontal">
            <h4>Please Update Your Accomodation Info. Maybe We Made An Error So Please Correct Us!</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.AccomodationInfoId)

            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PostalCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" data-dismiss="modal" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    </div>
<div class="col-sm-7">
    <style>
        #map_canvas img {
            max-width: none;
        }
    </style>

    <!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
    <style>
        .infoDiv {
            height: 200px;
            width: 300px;
            -webkit-user-select: none;
            background-color: white;
        }
    </style>
    <img src="http://www.travelsupermarket.com/wp-content/uploads/2014/10/shutterstock_66436003-pic2.jpg" style="width:110%; margin-top:20px" alt="Alternate Text" />


    <div id="map_canvas" style="height:300px; margin-top:20px"></div>
    </div>

 
       
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
<script>




    $(document).ready(function () {
        Initialize();
    });

    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Thiscity = new google.maps.LatLng(53.408841, -2.981397);
        var nesto = $('.gugl').val();
        var map;
        console.log(nesto);
        var url = "http://maps.googleapis.com/maps/api/geocode/json?sensor=false&address="+nesto;
        //   var url = "maps.googleapis.com/maps/api/geocode/json?address=+""+"&sensor=true_or_false";
        function change() {
            $.ajax({ url: url }).success(function (msg) {
                //console.log("proslo");

                console.log(msg.results[0].geometry.location.lat);
                console.log(msg.results[0].geometry.location.lng);
                console.log(Thiscity);
                Thiscity = new google.maps.LatLng(msg.results[0].geometry.location.lat, msg.results[0].geometry.location.lng);

                console.log(Thiscity);
                //  var studentName = $('a[href="/Students/Details/' + id + ' "]').text();
                //$('#student-name').html(studentName);
                //console.log(studentName);

                //   var mapOptions = {
                //     zoom: 14,
                //   center: Thiscity1,
                // mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                //};


                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 14,
                    center: Thiscity,
                    mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

                var marker;


                function placeMarker(location) {

                    if (!marker) {
                        marker = new google.maps.Marker({
                            position: location,
                            map: map
                        });
                    }
                    else {
                        marker.setPosition(location);
                        console.log(location);
                    }
                    //debugger;
                    var urll = "/LastStep/Updategoogle/";
                    var datas = { string1: location.H, string2: location.L };
                    $.ajax({ url: urll, data: datas }).success(function () {
                        console.log("proslo");

                        //  $('#zk').value = location.G;
                    }).error(function () {
                        console.log("proslo error");
                        $('.gugls').val(location.H);
                        $('.guglids').val(location.L);

                    });


                    marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                    //  marker.setPosition(location);


                }

                google.maps.event.addListener(map, 'click', function (event) {
                    placeMarker(event.latLng);
                });





            }).error(function (msg) { console.log("fail" + msg); });

        }

        change();
        

       // console.log(msg);
     

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 14,
            center: Thiscity,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
      //  var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
       
        // This shows adding a simple pin "marker" - this happens to be the Tate Gallery in Liverpool!
      // var myLatlng = new google.maps.LatLng(53.40091, -2.994464);

//        var marker = new google.maps.Marker({
  //          position: myLatlng,
    //        map: map,
      //      title: 'Tate Gallery'
        //});

        // You can make markers different colors...  google it up!
       // marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png')

        // a sample list of JSON encoded data of places to visit in Liverpool, UK
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
      //  var data = [
        //          { "Id": 1, "PlaceName": "Liverpool Museum", "OpeningHours":"9-5, M-F","GeoLong": "53.410146", "GeoLat": "-2.979919" },
          //        { "Id": 2, "PlaceName": "Merseyside Maritime Museum ", "OpeningHours": "9-1,2-5, M-F", "GeoLong": "53.401217", "GeoLat": "-2.993052" },
            //      { "Id": 3, "PlaceName": "Walker Art Gallery", "OpeningHours": "9-7, M-F", "GeoLong": "53.409839", "GeoLat": "-2.979447" },
              //    { "Id": 4, "PlaceName": "National Conservation Centre", "OpeningHours": "10-6, M-F", "GeoLong": "53.407511", "GeoLat": "-2.984683" }
        //];

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
      //  $.each(data, function (i, item) {
        //    var marker = new google.maps.Marker({
          //      'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
            //    'map': map,
              //  'title': item.PlaceName
            //});

            // Make the marker-pin blue!
         //   marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
           // var infowindow = new google.maps.InfoWindow({
            //    content: "<div class='infoDiv'><h2>" + item.PlaceName + "</h2>" + "<div><h4>Opening hours: " + item.OpeningHours + "</h4></div></div>"
            //});

            function placeMarker(location) {

             
                var marker = new google.maps.Marker({
                    position: location,
                    map: map
                });
                marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png');
                marker.setPosition(location);
            }

            //google.maps.event.addListener(map, 'click', function(event) {
           //     placeMarker(event.latLng);
          //  });


            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
          /*  google.maps.event.addListener(marker, 'click', function (event) {
                //      debugger;

                var latitude = event.latLng.lat();
                var longitude = event.latLng.lng();
                console.log( latitude + ', ' + longitude );

                radius = new google.maps.Circle({map: map,
                    radius: 100,
                    center: event.latLng,
                    fillColor: '#777',
                    fillOpacity: 0.1,
                    strokeColor: '#AA0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    draggable: true,    // Dragable
                    editable: true      // Resizable
                });

                // Center of map
                map.panTo(new google.maps.LatLng(latitude,longitude));
                //     infowindow.open(map, marker);


            });*/

        //})
    }

    </script>
    }
